/* The following code was generated by JFlex 1.4.3 on 6/24/19, 2:01 PM */

/*
 * Generated on 6/24/19, 2:01 PM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\62\1\26\1\14"+
    "\1\16\1\1\1\26\1\26\1\6\1\22\1\23\1\21\1\66\1\26"+
    "\1\67\1\25\1\20\1\4\3\4\4\4\2\3\1\40\1\26\1\15"+
    "\1\71\1\70\1\26\1\16\2\5\1\60\3\5\6\1\1\63\1\1"+
    "\1\64\1\1\1\65\1\1\1\61\7\1\1\27\1\10\1\27\1\72"+
    "\1\2\1\0\1\45\1\13\1\42\1\47\1\37\1\34\1\50\1\30"+
    "\1\35\1\57\1\54\1\36\1\44\1\46\1\43\1\32\1\51\1\12"+
    "\1\33\1\31\1\11\1\55\1\41\1\56\1\52\1\53\1\24\1\72"+
    "\1\24\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\2\7\23\1\1\6\1\10\1\11\4\10\1\12"+
    "\5\10\1\13\3\10\1\0\1\14\3\1\2\4\1\15"+
    "\1\16\1\17\1\20\4\1\1\21\34\1\1\22\14\1"+
    "\1\23\4\0\1\24\11\0\5\1\1\4\1\25\1\4"+
    "\65\1\15\0\1\21\6\1\1\4\10\1\1\21\53\1"+
    "\1\21\2\0\1\26\2\0\1\27\2\0\1\30\1\0"+
    "\2\1\1\4\2\1\1\21\1\1\1\21\36\1\7\0"+
    "\1\4\4\1\1\22\4\1\1\21\3\1\1\21\57\1"+
    "\1\22\22\1\1\21\13\1\1\21\30\1\2\21\34\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[462];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\354"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\354\0\u02c4\0\354"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0725\0\u0760\0\354\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\354\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\354\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\354\0\354\0\354\0\354\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0127\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u0127\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\354\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\354\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\354\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d"+
    "\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715"+
    "\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed"+
    "\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5"+
    "\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d"+
    "\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75"+
    "\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d"+
    "\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225"+
    "\0\u4260\0\u429b\0\u42d6\0\u4311\0\u3877\0\u434c\0\u3928\0\u4387"+
    "\0\u39d9\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u2cb6\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21"+
    "\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1"+
    "\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9"+
    "\0\354\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056"+
    "\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e"+
    "\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406"+
    "\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[462];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\2\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\2\20\2\5\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\16\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\5\6\1\42\2\6"+
    "\1\14\3\6\1\16\1\43\1\5\1\44\1\16\7\45"+
    "\1\46\11\45\1\47\6\45\1\50\3\45\1\51\4\45"+
    "\1\52\40\45\1\53\11\45\1\54\6\45\1\55\3\45"+
    "\1\56\4\45\1\57\31\45\7\60\1\61\20\60\1\62"+
    "\3\60\1\63\4\60\1\64\31\60\74\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\5\0\3\66\2\7\1\66\2\0\4\66\2\0\1\66"+
    "\11\0\10\66\1\0\21\66\1\0\3\66\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\67"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\70\1\0\4\6\1\71\14\6\1\0"+
    "\3\6\5\0\7\13\1\72\1\73\3\13\1\74\56\13"+
    "\17\0\1\14\42\0\1\14\30\0\1\75\1\76\72\0"+
    "\1\77\52\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\100\6\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\101\1\6\14\0\10\6\1\0"+
    "\2\6\1\102\6\6\1\103\7\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\104\2\6"+
    "\1\0\4\6\1\105\14\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\106\1\6\14\0\5\6\1\107"+
    "\2\6\1\0\1\6\1\110\6\6\1\111\10\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\1\112\1\113\1\6"+
    "\14\0\10\6\1\0\2\6\1\114\16\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\115\1\6\1\116\1\117\12\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\120"+
    "\2\6\1\0\4\6\1\121\14\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\122\1\6\1\123\1\124\1\6\1\125\3\6\1\126"+
    "\1\127\3\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\130\7\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\131\7\6"+
    "\1\0\2\6\1\132\1\6\1\133\14\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\2\6\1\134\14\0\2\6"+
    "\1\135\5\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\136\2\6\14\0\10\6\1\0\2\6"+
    "\1\137\1\6\1\140\1\6\1\141\12\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\142"+
    "\1\6\1\143\4\6\1\0\5\6\1\144\13\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\145\16\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\146\1\6\1\147"+
    "\1\6\1\150\1\0\2\6\1\151\16\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\152\1\6\14\0"+
    "\7\6\1\153\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\154\2\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\155\14\6\1\0\3\6\75\0"+
    "\1\16\2\0\7\45\1\0\11\45\1\0\6\45\1\0"+
    "\3\45\1\0\4\45\1\0\31\45\20\0\1\156\103\0"+
    "\1\157\72\0\1\160\3\0\1\161\76\0\1\162\54\0"+
    "\1\163\100\0\1\164\72\0\1\165\3\0\1\166\76\0"+
    "\1\167\31\0\7\60\1\0\20\60\1\0\3\60\1\0"+
    "\4\60\1\0\31\60\31\0\1\170\72\0\1\171\3\0"+
    "\1\172\76\0\1\173\42\0\1\174\61\0\6\66\2\0"+
    "\4\66\2\0\1\66\11\0\10\66\1\0\21\66\1\0"+
    "\3\66\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\175\2\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\176\6\6\1\0"+
    "\3\6\1\177\1\6\1\200\13\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\201\13\6\1\0\3\6\5\0\10\72\1\202\3\72"+
    "\1\203\62\72\1\13\1\72\1\13\1\0\1\13\1\204"+
    "\3\13\14\72\1\13\2\72\1\13\11\72\1\13\24\72"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\205\15\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\206\14\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\17\6\1\207\1\6\1\0\2\6\1\210"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\211"+
    "\5\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\212\6\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\104\17\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\213\3\6\1\214\11\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\215\7\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\6\6\1\104\1\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\216\13\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\217\16\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\1\6\1\220\1\6"+
    "\14\0\10\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\2\6\1\221\5\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\222\4\6\1\0\1\6\1\223\17\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\224\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\225\6\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\226\15\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\227"+
    "\5\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\230\6\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\7\6\1\231\11\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\232\2\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\111\14\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\233"+
    "\2\6\1\234\1\6\1\235\1\0\1\6\1\236\17\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\237\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\240\1\0\4\6"+
    "\1\241\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\1\242\2\6\14\0\2\6\1\243\3\6\1\244\1\245"+
    "\1\0\3\6\1\246\1\6\1\247\1\250\12\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\251\4\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\252\4\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\253\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\6\6\1\254"+
    "\1\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\255\12\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\256\5\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\257\6\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\260\4\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\261\16\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\231"+
    "\12\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\104\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\262"+
    "\4\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\263\1\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\250\15\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\264\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\265\6\6\1\0\5\6\1\266"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\267\1\0\2\6\1\270\16\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\14\6\1\271\4\6\1\0\3\6\36\0\1\272"+
    "\73\0\1\273\76\0\1\274\75\0\1\275\62\0\1\276"+
    "\73\0\1\277\76\0\1\300\75\0\1\301\62\0\1\302"+
    "\73\0\1\303\76\0\1\304\75\0\1\305\34\0\3\306"+
    "\5\0\1\306\20\0\1\306\2\0\1\306\2\0\1\306"+
    "\2\0\1\306\1\0\1\306\10\0\1\306\13\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\307\6\6\1\0"+
    "\2\6\1\310\5\6\1\311\10\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\312\2\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\2\6\1\313\16\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\314\14\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\315\12\6"+
    "\1\0\3\6\5\0\7\72\1\0\66\72\3\316\2\72"+
    "\1\202\2\72\1\316\1\203\17\72\1\316\2\72\1\316"+
    "\2\72\1\316\2\72\1\316\1\72\1\316\10\72\1\316"+
    "\12\72\1\0\5\6\2\0\1\65\3\6\14\0\6\6"+
    "\1\141\1\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\317"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\2\6\1\320\16\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\321\2\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\322\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\323\7\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\2\6\1\324\5\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\325\15\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\326\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\135\17\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\327\6\6\1\330\6\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\331\1\0\4\6"+
    "\1\332\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\333\16\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\334\5\6\1\335\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\6\6\1\336\1\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\337\13\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\340\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\2\6\1\341\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\342\6\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\343\2\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\344\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\135\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\345\16\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\346\4\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\347"+
    "\17\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\350\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\351\1\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\352\17\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\351\4\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\353"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\354\1\6\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\355"+
    "\2\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\10\6\1\356\3\6"+
    "\1\126\4\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\357\15\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\360\4\6\1\0\21\6\1\0\3\6\6\0\1\6"+
    "\1\361\3\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\362\17\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\363"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\364\2\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\365\6\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\366\2\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\367\5\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\370\1\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\371\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\372\13\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\373\6\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\374\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\375"+
    "\5\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\20\6\1\376\1\0"+
    "\1\377\2\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u0100\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\u0101\1\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0102\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u0103\14\6\1\0\3\6\37\0\1\u0104\100\0"+
    "\1\u0105\71\0\1\273\60\0\1\u0106\77\0\1\u0107\100\0"+
    "\1\u0108\71\0\1\277\60\0\1\u0109\77\0\1\u010a\100\0"+
    "\1\u010b\71\0\1\303\60\0\1\u010c\50\0\3\u010d\5\0"+
    "\1\u010d\20\0\1\u010d\2\0\1\u010d\2\0\1\u010d\2\0"+
    "\1\u010d\1\0\1\u010d\10\0\1\u010d\13\0\1\6\1\u010e"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\104\13\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\351\2\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\310\1\6\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\14\6\1\351\4\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\351\15\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u010f\16\6\1\0\3\6\5\0"+
    "\3\72\3\u0110\2\72\1\202\2\72\1\u0110\1\203\17\72"+
    "\1\u0110\2\72\1\u0110\2\72\1\u0110\2\72\1\u0110\1\72"+
    "\1\u0110\10\72\1\u0110\12\72\1\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\u0111\4\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\21\6\1\0\2\6\1\210\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\u0112\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\u0113\4\6\1\0\21\6\1\0\3\6\6\0\1\6"+
    "\1\u0114\3\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\6\6\1\351\1\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u0115\14\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u0116\15\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\17\6\1\u0117\1\376\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\310\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u0118\2\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\6\6\1\111"+
    "\1\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\u0119\1\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\u011a\14\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\146\1\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\1\u011b\2\6\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u011c"+
    "\6\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\126\1\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\6\6\1\374\12\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\11\6"+
    "\1\104\7\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u011d\6\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\104\4\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\u011e\1\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\344\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\1\6\1\u011f\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\2\6\1\u0120\5\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\104\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\13\6\1\104"+
    "\5\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u0121\2\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u0122\16\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u0123\15\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\1\u0124\2\6"+
    "\14\0\10\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u0125"+
    "\14\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0126\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\104"+
    "\6\6\1\0\3\6\1\104\4\6\1\104\10\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\u0127\14\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\u0128\1\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\2\6\1\u0129\16\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\323"+
    "\2\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\4\6\1\342\3\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u012a\2\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u012b\2\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\u012c\1\6\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\11\6\1\u012d\7\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u012e\2\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\104\14\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\141\7\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u012f\17\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\u0130\14\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\u0131\1\6\14\0\10\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\11\6\1\141\7\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\u0132"+
    "\2\6\1\0\21\6\1\0\3\6\6\0\1\6\1\u0133"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\40\0\1\273\4\0\1\u0105\52\0\1\u0134"+
    "\53\0\1\u0106\1\u0135\3\u0106\1\u0135\2\0\3\u0106\2\0"+
    "\1\u0135\1\0\1\u0106\3\u0135\1\0\3\u0135\10\u0106\1\u0135"+
    "\21\u0106\1\0\3\u0106\2\u0135\1\0\1\u0135\34\0\1\277"+
    "\4\0\1\u0108\52\0\1\u0136\53\0\1\u0109\1\u0137\3\u0109"+
    "\1\u0137\2\0\3\u0109\2\0\1\u0137\1\0\1\u0109\3\u0137"+
    "\1\0\3\u0137\10\u0109\1\u0137\21\u0109\1\0\3\u0109\2\u0137"+
    "\1\0\1\u0137\34\0\1\303\4\0\1\u010b\52\0\1\u0138"+
    "\53\0\1\u010c\1\u0139\3\u010c\1\u0139\2\0\3\u010c\2\0"+
    "\1\u0139\1\0\1\u010c\3\u0139\1\0\3\u0139\10\u010c\1\u0139"+
    "\21\u010c\1\0\3\u010c\2\u0139\1\0\1\u0139\4\0\3\u013a"+
    "\5\0\1\u013a\20\0\1\u013a\2\0\1\u013a\2\0\1\u013a"+
    "\2\0\1\u013a\1\0\1\u013a\10\0\1\u013a\13\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\10\6\1\210"+
    "\10\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\104\15\6\1\0\3\6"+
    "\5\0\3\72\3\u013b\2\72\1\202\2\72\1\u013b\1\203"+
    "\17\72\1\u013b\2\72\1\u013b\2\72\1\u013b\2\72\1\u013b"+
    "\1\72\1\u013b\10\72\1\u013b\12\72\1\0\5\6\2\0"+
    "\1\65\3\6\14\0\4\6\1\u013c\3\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\1\6\1\342"+
    "\1\6\14\0\10\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u013d\2\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u013e\1\0\21\6\1\0\3\6"+
    "\6\0\1\6\1\u013f\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u0140\14\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u0141\16\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\7\6"+
    "\1\u0142\11\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0143\6\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\u0144\13\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\351"+
    "\12\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\227\2\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\231"+
    "\2\6\1\0\11\6\1\u0145\7\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0146\6\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u0147\14\6\1\u0148"+
    "\2\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0149\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\307"+
    "\6\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\6\6\1\u014a\12\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\146\2\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\u014b\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\u014c\13\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\1\6\1\u014d\1\6"+
    "\14\0\10\6\1\0\4\6\1\u014e\14\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u014f\12\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\14\6\1\u0150\4\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\344\13\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\u0151\13\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\2\6\1\u0152\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u0153"+
    "\6\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\3\6\1\u0154\15\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\u0155\13\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\u0156\7\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\u0157\5\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u0158\14\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\u0159\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u015a\2\6\1\u015b\3\6\1\0\1\6\1\u015c\17\6"+
    "\1\0\3\6\25\0\1\u0106\72\0\1\u0109\72\0\1\u010c"+
    "\55\0\3\6\5\0\1\6\20\0\1\6\2\0\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\1\6\10\0\1\6"+
    "\12\0\3\72\3\13\2\72\1\202\2\72\1\13\1\203"+
    "\17\72\1\13\2\72\1\13\2\72\1\13\2\72\1\13"+
    "\1\72\1\13\10\72\1\13\12\72\1\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\u015d\16\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\6\6\1\u015e\12\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\10\6"+
    "\1\125\10\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u015f\17\6\1\0"+
    "\3\6\6\0\1\6\1\u0160\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\0\1\6\1\u0161\1\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\u0162\12\6\1\u0163\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u0164"+
    "\13\6\1\0\3\6\6\0\1\6\1\u0165\3\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\104\4\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\u0166\17\6\1\0\3\6\6\0"+
    "\1\6\1\u0167\3\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u0168\15\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\104\4\6\1\0\6\6\1\u0169\12\6\1\0\3\6"+
    "\6\0\1\6\1\u016a\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\1\u016b\2\6\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\6\6"+
    "\1\u0154\1\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\141"+
    "\12\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\u016c\14\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\346\13\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\7\6\1\u016d\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\u016e\14\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\7\6\1\141"+
    "\11\6\1\0\3\6\6\0\5\6\2\0\1\65\1\u016f"+
    "\2\6\14\0\10\6\1\0\21\6\1\0\3\6\6\0"+
    "\1\6\1\u0170\3\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\u0171\2\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\1\6\1\u0120\17\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\u0172\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\u0173\5\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0174\6\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\u0175\13\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\11\6\1\u0176\7\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\1\112\2\6\14\0\10\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u0177\16\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\1\6\1\u0178\1\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u0179\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\u017a\7\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u017b\17\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\4\6"+
    "\1\104\3\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u017c\4\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\u017d\5\6\1\0\21\6\1\0\3\6"+
    "\6\0\1\6\1\u017e\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\u017f\14\6"+
    "\1\u0180\2\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\141\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u0181\14\6\1\u0182\2\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\u0183\12\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\2\6\1\106\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u0184\1\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\u0185\17\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u0186\2\6\1\0\21\6\1\0\3\6\6\0"+
    "\1\6\1\u0187\3\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u0188\6\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\231\6\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0189"+
    "\17\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\12\6\1\351\6\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\374\15\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u018a\2\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u018b\16\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u018c\6\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\2\6\1\231\5\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\u018d\13\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\3\6\1\141"+
    "\15\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\0\1\6\1\u0161\1\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\241\14\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\u018e\16\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\u018f\6\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\u0190\14\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\13\6\1\u0191\5\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\u0192\4\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\6\6\1\u0193"+
    "\12\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\u0194\4\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u0195\12\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\u0196\1\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u0197\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u0198\6\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\5\6\1\u0199\13\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u019a\12\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u019b\2\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u019c\16\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\u019d\13\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\344\1\6\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\1\6\1\u019e\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u019f\4\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\6\6\1\u01a0\1\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u01a1\1\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\u01a2\13\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u01a3\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\14\6\1\104"+
    "\4\6\1\0\3\6\6\0\5\6\2\0\1\65\2\6"+
    "\1\u01a4\14\0\10\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\14\6"+
    "\1\u01a5\4\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\2\6\1\u01a6\14\0\10\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\u01a7"+
    "\2\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\176\6\6\1\0\21\6"+
    "\1\0\3\6\6\0\1\6\1\u01a8\3\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u01a9\6\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u01aa\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u01ab\16\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\u01ac\13\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\7\6\1\104\11\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\u017f\6\6\1\210\5\6\1\u01ad\2\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\u01ae"+
    "\6\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\5\6\1\u01af\2\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\u01b0\14\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\21\6"+
    "\1\u01b1\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\11\6\1\344\7\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\u01b2\17\6\1\0\3\6\6\0\1\6\1\u01b3\3\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\1\6\1\u01b4\17\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\351"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\u01b5\4\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\141"+
    "\4\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\u01b6\1\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\323\13\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\u01b7\4\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\u0169\12\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\u014e\14\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\3\6\1\u01b8"+
    "\15\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u014e\2\6\1\0\21\6\1\0\3\6"+
    "\6\0\1\6\1\u01b9\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u01ba\3\6\1\u01bb\2\6"+
    "\1\0\21\6\1\0\3\6\6\0\1\6\1\u01bc\3\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\u01bd\2\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\u01be\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u01bf\2\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u01c0\2\6"+
    "\1\0\21\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\332\14\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\1\6\1\u01c1\1\6"+
    "\14\0\10\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u01c2"+
    "\13\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u01ba\3\6\1\u01bb\2\6\1\0\10\6"+
    "\1\210\10\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\7\6\1\u0172\11\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\351\6\6\1\0\21\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u01c3\4\6\1\0"+
    "\21\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\141\6\6\1\0\21\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u01c4\14\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\u01c5\4\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\u01c6\6\6\1\0\21\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\u01c7\13\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u01c8\6\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u01c9\1\0\21\6\1\0\3\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\u01ca\4\6\1\0\21\6"+
    "\1\0\3\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\u01cb\14\6\1\0\3\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\146\13\6\1\0\3\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\4\6\1\u01cc\3\6\1\0\21\6\1\0"+
    "\3\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\u01cd\13\6\1\0\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\u01ce"+
    "\16\6\1\0\3\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\351\17\6\1\0\3\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u010f\1\6\14\0"+
    "\10\6\1\0\21\6\1\0\3\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26019];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\5\1\1\11\1\1\1\11"+
    "\25\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\6\1\4\11\56\1\1\11\4\0\1\11\11\0\6\1"+
    "\1\11\66\1\15\0\75\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\46\1\7\0\166\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[462];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		try {
			addToken(zzStartRead, zzMarkedPos - 1, tokenType);
		} catch (Exception ex) {
		} // TODO aql sigh
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 25: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 21: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 30: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 35: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 36: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 38: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 39: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 40: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 41: break;
        case 17: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 42: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(DOCCOMMENT);
          }
        case 44: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 45: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 46: break;
        case 8: 
          { 
          }
        case 47: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 463: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 464: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 465: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 466: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
