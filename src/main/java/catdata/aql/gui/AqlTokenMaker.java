/* The following code was generated by JFlex 1.4.3 on 12/2/17 7:15 PM */

/*
 * Generated on 12/2/17 7:15 PM
 */
package catdata.aql.gui;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings("unused")
public class AqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\26\1\14"+
    "\1\16\1\1\1\26\1\26\1\6\1\22\1\23\1\21\1\65\1\26"+
    "\1\66\1\25\1\20\1\4\3\4\4\4\2\3\1\40\1\26\1\15"+
    "\1\70\1\67\1\26\1\16\2\5\1\63\3\5\6\1\1\60\1\1"+
    "\1\62\1\1\1\64\1\1\1\61\7\1\1\27\1\10\1\27\1\71"+
    "\1\2\1\0\1\45\1\13\1\42\1\47\1\37\1\34\1\50\1\30"+
    "\1\35\1\57\1\53\1\36\1\44\1\46\1\43\1\32\1\51\1\12"+
    "\1\33\1\31\1\11\1\55\1\41\1\56\1\52\1\54\1\24\1\71"+
    "\1\24\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\2\7\23\1\1\6\1\10\1\11\4\10\1\12"+
    "\5\10\1\13\3\10\1\0\1\14\3\1\2\4\1\15"+
    "\1\16\1\17\1\20\37\1\1\21\12\1\1\22\4\0"+
    "\1\23\11\0\5\1\1\4\1\24\1\4\6\1\1\25"+
    "\52\1\15\0\1\25\4\1\1\4\55\1\1\25\2\0"+
    "\1\26\2\0\1\27\2\0\1\30\1\0\2\1\1\4"+
    "\2\1\1\25\1\1\1\25\31\1\7\0\1\4\4\1"+
    "\1\21\3\1\1\25\54\1\1\21\17\1\1\25\10\1"+
    "\1\25\23\1\1\25\45\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\350"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\350\0\u02b8\0\350"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0706\0\u0740\0\350\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\350\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a"+
    "\0\350\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\350\0\350\0\350\0\350\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u0122\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\350\0\u1512\0\u154c\0\u1586\0\u15c0\0\350\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\350\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u0122\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6"+
    "\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6"+
    "\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286"+
    "\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456"+
    "\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6"+
    "\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u33a8\0\u3d2c"+
    "\0\u3456\0\u3d66\0\u3504\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u29b0\0\u3fe4\0\u401e"+
    "\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee"+
    "\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be"+
    "\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e"+
    "\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e"+
    "\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e"+
    "\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe"+
    "\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce"+
    "\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e"+
    "\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e"+
    "\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e"+
    "\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de"+
    "\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae"+
    "\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e"+
    "\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e"+
    "\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\2\7\1\6\1\5\1\10\1\5\1\11"+
    "\1\12\1\6\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\2\20\2\5\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\16\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\5\6\1\42\5\6"+
    "\1\16\1\43\1\5\1\44\1\16\7\45\1\46\11\45"+
    "\1\47\6\45\1\50\3\45\1\51\4\45\1\52\37\45"+
    "\1\53\11\45\1\54\6\45\1\55\3\45\1\56\4\45"+
    "\1\57\30\45\7\60\1\61\20\60\1\62\3\60\1\63"+
    "\4\60\1\64\30\60\73\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\24\6\5\0\3\66\2\7\1\66"+
    "\2\0\4\66\2\0\1\66\11\0\10\66\1\0\24\66"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\67\16\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\70\1\0\4\6\1\71\17\6\5\0"+
    "\7\13\1\72\1\73\3\13\1\74\55\13\17\0\1\14"+
    "\72\0\1\75\1\76\71\0\1\77\51\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\100\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\101\1\6\14\0"+
    "\10\6\1\0\2\6\1\102\6\6\1\103\12\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\104\17\6\6\0\5\6\2\0\1\65\1\6\1\105"+
    "\1\6\14\0\5\6\1\106\2\6\1\0\1\6\1\107"+
    "\6\6\1\110\13\6\6\0\5\6\2\0\1\65\1\111"+
    "\1\112\1\6\14\0\10\6\1\0\2\6\1\113\21\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\114\1\6\1\115\1\116\15\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\117\2\6\1\0"+
    "\4\6\1\120\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\3\6\1\121\1\6\1\122\1\123"+
    "\1\6\1\124\3\6\1\125\1\126\6\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\127\7\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\130\7\6"+
    "\1\0\2\6\1\131\21\6\6\0\5\6\2\0\1\65"+
    "\2\6\1\132\14\0\2\6\1\133\5\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\1\134\2\6\14\0\10\6"+
    "\1\0\2\6\1\135\1\6\1\136\1\6\1\137\15\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\140"+
    "\1\6\1\141\4\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\142\21\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\143"+
    "\1\6\1\144\1\6\1\145\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\146\1\6\14\0\7\6\1\147"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\1\150\2\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\151\17\6\74\0"+
    "\1\16\2\0\7\45\1\0\11\45\1\0\6\45\1\0"+
    "\3\45\1\0\4\45\1\0\30\45\20\0\1\152\102\0"+
    "\1\153\71\0\1\154\3\0\1\155\75\0\1\156\53\0"+
    "\1\157\77\0\1\160\71\0\1\161\3\0\1\162\75\0"+
    "\1\163\30\0\7\60\1\0\20\60\1\0\3\60\1\0"+
    "\4\60\1\0\30\60\31\0\1\164\71\0\1\165\3\0"+
    "\1\166\75\0\1\167\41\0\1\170\60\0\6\66\2\0"+
    "\4\66\2\0\1\66\11\0\10\66\1\0\24\66\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\171\2\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\172\6\6\1\0\3\6\1\173\1\6\1\174"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\175\16\6\5\0\10\72\1\176\3\72"+
    "\1\177\61\72\1\13\1\72\1\13\1\0\1\13\1\200"+
    "\3\13\14\72\1\13\2\72\1\13\11\72\1\13\23\72"+
    "\1\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\201\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\202\17\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\22\6\1\203"+
    "\1\204\6\0\5\6\2\0\1\65\3\6\14\0\2\6"+
    "\1\205\5\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\206\6\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\207\22\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\3\6\1\210\3\6\1\211\14\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\212\7\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\6\6"+
    "\1\207\1\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\213\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\2\6"+
    "\1\214\21\6\6\0\5\6\2\0\1\65\1\6\1\215"+
    "\1\6\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\2\6\1\216\5\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\217"+
    "\4\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\220\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\221\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\222\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\223\5\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\224\6\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\7\6\1\225\14\6\6\0\5\6\2\0\1\65"+
    "\1\226\2\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\110"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\2\6"+
    "\1\227\2\6\1\230\1\6\1\231\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\232\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\233\1\0\4\6\1\234\17\6\6\0\5\6\2\0"+
    "\1\65\1\235\2\6\14\0\2\6\1\236\3\6\1\237"+
    "\1\240\1\0\3\6\1\241\1\6\1\242\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\243\4\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\244\6\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\245\1\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\246\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\2\6\1\247\5\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\250\6\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\3\6"+
    "\1\251\4\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\225\15\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\207\6\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\3\6\1\252\4\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\253\1\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\254\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\255\6\6\1\0\5\6\1\256\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\257"+
    "\1\0\2\6\1\260\21\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\14\6\1\261\7\6\36\0"+
    "\1\262\72\0\1\263\75\0\1\264\74\0\1\265\61\0"+
    "\1\266\72\0\1\267\75\0\1\270\74\0\1\271\61\0"+
    "\1\272\72\0\1\273\75\0\1\274\74\0\1\275\33\0"+
    "\3\276\5\0\1\276\20\0\1\276\2\0\1\276\2\0"+
    "\1\276\2\0\1\276\1\0\1\276\13\0\1\276\7\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\277\6\6"+
    "\1\0\10\6\1\300\13\6\6\0\5\6\2\0\1\65"+
    "\1\301\2\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\2\6\1\302"+
    "\21\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\303\17\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\112\15\6\5\0"+
    "\7\72\1\0\65\72\3\304\2\72\1\176\2\72\1\304"+
    "\1\177\17\72\1\304\2\72\1\304\2\72\1\304\2\72"+
    "\1\304\1\72\1\304\13\72\1\304\6\72\1\0\5\6"+
    "\2\0\1\65\3\6\14\0\6\6\1\137\1\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\305\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\306\21\6\6\0"+
    "\5\6\2\0\1\65\1\307\2\6\14\0\10\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\310\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\311\7\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\2\6\1\312\5\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\313\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\314\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\133\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\207\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\315\1\0\4\6\1\316\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\2\6"+
    "\1\317\21\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\320\5\6\1\321\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\322"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\323\1\0\24\6\6\0\5\6\2\0\1\65\2\6"+
    "\1\324\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\325\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\326"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\327\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\133\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\330\21\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\331\4\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\332"+
    "\22\6\6\0\5\6\2\0\1\65\1\6\1\333\1\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\334\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\333\4\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\335\16\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\336\1\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\337"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\10\6\1\340\3\6\1\125\7\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\341\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\342\4\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\343\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\344"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\345\6\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\346\2\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\2\6"+
    "\1\347\5\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\350\1\6\14\0\10\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\7\6\1\351\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\352\6\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\353\6\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\2\6\1\354\5\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\17\6\1\355\1\356\3\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\357\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\360\1\6\14\0"+
    "\10\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\361\6\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\362"+
    "\17\6\37\0\1\363\77\0\1\364\70\0\1\263\57\0"+
    "\1\365\76\0\1\366\77\0\1\367\70\0\1\267\57\0"+
    "\1\370\76\0\1\371\77\0\1\372\70\0\1\273\57\0"+
    "\1\373\47\0\3\374\5\0\1\374\20\0\1\374\2\0"+
    "\1\374\2\0\1\374\2\0\1\374\1\0\1\374\13\0"+
    "\1\374\7\0\1\6\1\375\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\1\333\2\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\376\1\6\14\0\10\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\14\6\1\333\7\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\333\20\6\5\0"+
    "\3\72\3\377\2\72\1\176\2\72\1\377\1\177\17\72"+
    "\1\377\2\72\1\377\2\72\1\377\2\72\1\377\1\72"+
    "\1\377\13\72\1\377\6\72\1\0\5\6\2\0\1\65"+
    "\3\6\14\0\3\6\1\u0100\4\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\23\6"+
    "\1\204\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u0101\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\u0102\4\6\1\0\24\6\6\0\1\6"+
    "\1\u0103\3\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\6\6"+
    "\1\333\1\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\u0104\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\u0105\20\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u0106\2\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\6\6\1\110\1\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\u0107\1\6\14\0"+
    "\10\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\4\6\1\u0108\17\6\6\0\5\6"+
    "\2\0\1\65\1\6\1\143\1\6\14\0\10\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u0109\6\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\125\1\6\14\0\10\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\353\15\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\11\6\1\207\12\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u010a\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\207"+
    "\4\6\1\0\24\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\u010b\1\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\327\6\6\1\0"+
    "\24\6\6\0\1\6\1\u010c\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\207\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\12\6\1\207"+
    "\11\6\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\u010d\2\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\u010e\21\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\u010f\20\6\6\0\5\6\2\0\1\65\1\u0110\2\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\u0111\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0112\6\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\1\6\1\u0113"+
    "\1\6\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\u0114\21\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\311"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\4\6\1\325\3\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u0115\2\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\5\6"+
    "\1\u0116\2\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\u0117\1\6\14\0\10\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u0118\2\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\207\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\137\7\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\4\6"+
    "\1\u0119\17\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\u011a\22\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\u011b\1\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\11\6\1\137\12\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u011c\2\6\1\0\24\6\6\0\1\6"+
    "\1\u011d\3\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\24\6\40\0\1\263\4\0\1\364\51\0\1\u011e\52\0"+
    "\1\365\1\u011f\3\365\1\u011f\2\0\3\365\2\0\1\u011f"+
    "\1\0\1\365\3\u011f\1\0\3\u011f\10\365\1\u011f\24\365"+
    "\2\u011f\1\0\1\u011f\34\0\1\267\4\0\1\367\51\0"+
    "\1\u0120\52\0\1\370\1\u0121\3\370\1\u0121\2\0\3\370"+
    "\2\0\1\u0121\1\0\1\370\3\u0121\1\0\3\u0121\10\370"+
    "\1\u0121\24\370\2\u0121\1\0\1\u0121\34\0\1\273\4\0"+
    "\1\372\51\0\1\u0122\52\0\1\373\1\u0123\3\373\1\u0123"+
    "\2\0\3\373\2\0\1\u0123\1\0\1\373\3\u0123\1\0"+
    "\3\u0123\10\373\1\u0123\24\373\2\u0123\1\0\1\u0123\4\0"+
    "\3\u0124\5\0\1\u0124\20\0\1\u0124\2\0\1\u0124\2\0"+
    "\1\u0124\2\0\1\u0124\1\0\1\u0124\13\0\1\u0124\7\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\10\6"+
    "\1\204\13\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\207\16\6\5\0\3\72\3\u0125"+
    "\2\72\1\176\2\72\1\u0125\1\177\17\72\1\u0125\2\72"+
    "\1\u0125\2\72\1\u0125\2\72\1\u0125\1\72\1\u0125\13\72"+
    "\1\u0125\6\72\1\0\5\6\2\0\1\65\3\6\14\0"+
    "\4\6\1\u0126\3\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\325\1\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\u0127"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\u0128\1\0\24\6\6\0\1\6\1\u0129"+
    "\3\6\2\0\1\65\3\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\4\6\1\u012a\17\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\7\6\1\u012b\14\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u012c\6\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\u012d\16\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\5\6\1\223\2\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\225\2\6"+
    "\1\0\11\6\1\u012e\12\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\u012f\6\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\1\6"+
    "\1\u0130\14\6\1\u0131\5\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\6\1\277\6\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\u0132\15\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\143\2\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u0133\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\u0134\16\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\u0135\1\6\14\0\10\6\1\0\4\6\1\u0136\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\14\6\1\u0137\7\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\5\6\1\327\16\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u0138"+
    "\16\6\6\0\5\6\2\0\1\65\2\6\1\u0139\14\0"+
    "\10\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u013a\6\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u013b"+
    "\16\6\6\0\5\6\2\0\1\65\3\6\14\0\2\6"+
    "\1\u013c\5\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\1\u013d\7\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u013e"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u013f\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u0140\2\6\1\u0141\3\6\1\0\1\6"+
    "\1\u0142\22\6\25\0\1\365\71\0\1\370\71\0\1\373"+
    "\54\0\3\6\5\0\1\6\20\0\1\6\2\0\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\1\6\13\0\1\6"+
    "\6\0\3\72\3\13\2\72\1\176\2\72\1\13\1\177"+
    "\17\72\1\13\2\72\1\13\2\72\1\13\2\72\1\13"+
    "\1\72\1\13\13\72\1\13\6\72\1\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\2\6\1\u0143\21\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u0144\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\10\6\1\124\13\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u0145"+
    "\22\6\6\0\1\6\1\u0146\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\u0147\2\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\5\6\1\u0148"+
    "\16\6\6\0\1\6\1\u0149\3\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\207\4\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u014a"+
    "\22\6\6\0\1\6\1\u014b\3\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\3\6\1\u014c\20\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\207\4\6"+
    "\1\0\6\6\1\u014d\15\6\6\0\5\6\2\0\1\65"+
    "\1\u014e\2\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\6\6\1\u014f\1\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\137\15\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\u0150\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\331\16\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\4\6\1\u0151\17\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\7\6\1\137\14\6"+
    "\6\0\5\6\2\0\1\65\1\u0152\2\6\14\0\10\6"+
    "\1\0\24\6\6\0\1\6\1\u0153\3\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\1\6\1\143\22\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\2\6\1\u0154"+
    "\5\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\u0155\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u0156\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\u0157\16\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\11\6\1\u0158\12\6\6\0\5\6"+
    "\2\0\1\65\1\111\2\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u0159\21\6\6\0\5\6\2\0\1\65\1\6"+
    "\1\u015a\1\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\7\6\1\u015b\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\u015c\7\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\u015d\22\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\4\6\1\207\3\6\1\0\24\6"+
    "\6\0\1\6\1\u015e\3\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\u015f\14\6\1\u0160\5\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\7\6\1\137"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\u0161\14\6\1\u0162\5\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\6\6"+
    "\1\u0163\15\6\6\0\5\6\2\0\1\65\2\6\1\105"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u0164\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u0165\2\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u0166\2\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u0167\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\1\6\1\225"+
    "\6\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\u0168\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u0169\2\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\3\6\1\353\20\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\2\6\1\u016a\21\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u016b\6\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\2\6\1\225\5\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\u016c\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\3\6\1\137\20\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\21\6\1\u0147\2\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\234"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\u016d\21\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\12\6\1\u016e\11\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\u016f\4\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\6\6\1\u0170\15\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\3\6\1\u0171\4\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\6\6\1\u0172\15\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\6\6\1\u0173\1\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u0174\6\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\13\6\1\333\10\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\u0175\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\5\6\1\u0176\2\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\2\6\1\u0177\21\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\u0178\16\6"+
    "\6\0\5\6\2\0\1\65\1\6\1\327\1\6\14\0"+
    "\10\6\1\0\24\6\6\0\1\6\1\u0179\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u017a\4\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\6\6"+
    "\1\u017b\1\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\7\6\1\u017c\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\14\6\1\207"+
    "\7\6\6\0\5\6\2\0\1\65\2\6\1\u017d\14\0"+
    "\10\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\14\6\1\u017e\7\6\6\0\5\6"+
    "\2\0\1\65\2\6\1\u017f\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\u0180"+
    "\2\6\1\0\24\6\6\0\1\6\1\u0181\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\1\6\1\u0182\6\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\2\6\1\u0183\21\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\u0184\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\7\6"+
    "\1\207\14\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\1\6\1\u015f\14\6\1\u0185\5\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u0186\6\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\5\6\1\u0187\2\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\11\6\1\327\12\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\1\6\1\u0188\22\6\6\0\1\6\1\u0189\3\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\1\6\1\u018a"+
    "\22\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\5\6\1\333\16\6\6\0\5\6\2\0\1\65"+
    "\1\u018b\2\6\14\0\3\6\1\u018c\4\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\137"+
    "\4\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\5\6\1\311\16\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u018d\4\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\6\6\1\u014d\15\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\4\6\1\u0136\17\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\3\6"+
    "\1\u018e\20\6\6\0\1\6\1\u018f\3\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u0190\3\6\1\u0191\2\6"+
    "\1\0\24\6\6\0\1\6\1\u0192\3\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\5\6\1\u0193\16\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\5\6\1\u0194"+
    "\2\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\5\6\1\u0195\2\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u0196\2\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\10\6"+
    "\1\0\4\6\1\316\17\6\6\0\5\6\2\0\1\65"+
    "\1\6\1\u0197\1\6\14\0\10\6\1\0\24\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\10\6\1\0\5\6"+
    "\1\u0198\16\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\u0190\3\6\1\u0191\2\6\1\0\10\6\1\204"+
    "\13\6\6\0\5\6\2\0\1\65\1\6\1\u0199\1\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\7\6\1\u0155\14\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\3\6\1\u019a\4\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\1\6\1\137\6\6\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\10\6\1\0\4\6\1\u019b\17\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\3\6\1\u019c"+
    "\4\6\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\7\6\1\u019d\1\0\24\6\6\0\5\6\2\0"+
    "\1\65\3\6\14\0\1\6\1\u019e\6\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\5\6\1\u019f\16\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\1\6\1\u01a0\6\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\3\6\1\u01a1\4\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\3\6\14\0\7\6"+
    "\1\u01a2\1\0\24\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\3\6\1\u01a3\4\6\1\0\24\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\10\6\1\0\4\6\1\u01a4"+
    "\17\6\6\0\5\6\2\0\1\65\3\6\14\0\1\6"+
    "\1\u01a5\6\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\5\6\1\143\16\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\4\6\1\u01a6\3\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\10\6\1\0\5\6\1\u01a7\16\6\6\0\5\6\2\0"+
    "\1\65\1\6\1\u01a8\1\6\14\0\10\6\1\0\24\6"+
    "\6\0\5\6\2\0\1\65\3\6\14\0\10\6\1\0"+
    "\2\6\1\u01a9\21\6\6\0\5\6\2\0\1\65\3\6"+
    "\14\0\10\6\1\0\1\6\1\333\22\6\6\0\5\6"+
    "\2\0\1\65\3\6\14\0\5\6\1\u01aa\2\6\1\0"+
    "\24\6\6\0\5\6\2\0\1\65\1\6\1\214\1\6"+
    "\14\0\10\6\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\1\6\1\u01ab\22\6\6\0"+
    "\5\6\2\0\1\65\3\6\14\0\1\6\1\u01ac\6\6"+
    "\1\0\24\6\6\0\5\6\2\0\1\65\3\6\14\0"+
    "\7\6\1\u01ad\1\0\24\6\6\0\5\6\2\0\1\65"+
    "\3\6\14\0\10\6\1\0\6\6\1\207\15\6\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\5\1\1\11\1\1\1\11"+
    "\25\1\1\11\4\1\1\11\5\1\1\11\3\1\1\0"+
    "\6\1\4\11\52\1\1\11\4\0\1\11\11\0\6\1"+
    "\1\11\62\1\15\0\64\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\41\1\7\0\211\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[429];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
 
private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		try {
			addToken(zzStartRead, zzMarkedPos-1, tokenType);
		} catch (Exception ex) { } //TODO aql sigh
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null; //new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AqlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AqlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            
              zzInput = zzBufferL[zzCurrentPosL++];
            
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 25: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 26: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 29: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_DOCUMENTATION);
          }
        case 30: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 33: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 35: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 36: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 38: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 39: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 40: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 41: break;
        case 21: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 42: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 43: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(DOCCOMMENT);
          }
        case 44: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 45: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 46: break;
        case 8: 
          { 
          }
        case 47: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 430: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 431: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 432: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 433: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
